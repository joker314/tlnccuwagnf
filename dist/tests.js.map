{"version":3,"sources":["tests.js"],"names":[],"mappings":"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","file":"tests.js","sourcesContent":["'use strict'\n\nrequire('string.prototype.repeat')\n\nconst equal = require('deep-equal')\nconst chalk = require('chalk')\nconst run = require('../req.js')\n\nmodule.exports = function doTests() {\n  const oldLog = console.log\n\n  let passed = 0\n  let tests = 0\n\n  const area = function(title) {\n    console.log('\\n   ' + chalk.bold(title) + ' ' + '-'.repeat(30 - title.length))\n  }\n\n  const test = function(code, assume, title) {\n    title = (title || code).toLowerCase()\n    tests++\n    const out = []\n    console.log = function(...args) {\n      out.push(args)\n    }\n    chalk.enabled = false\n    const promise = run(code, __dirname, true)\n    promise.then(function() {\n      chalk.enabled = true\n      console.log = oldLog\n      if (!assume(out)) {\n        oldLog(chalk.red(' ✗ ' + (title)))\n        oldLog(out)\n      } else {\n        passed++\n        oldLog(chalk.green(' ✓ ' + (title)))\n      }\n    })\n    promise.catch((e) => {\n      console.log = oldLog\n      console.error(e)\n    })\n    return promise\n  }\n\n  const checkOut = function(compare) {\n    // this should be called like this:\n    // test(code, checkOut`compareThis`)\n    // or like this:\n    // test(code, checkOut(compareThese))\n\n    return function(result) {\n      return equal(result[0], compare)\n    }\n  }\n\n  console.time('Total tests time')\n  return (async function() {\n    try {\n      area('Print')\n      // Test print output\n      await test(`print(\"hello!\");`, checkOut`hello!`, 'basic usage')\n      // Test print with multiple arguments\n      await test(`print(\"hello\", \"world\");`, checkOut([`hello`, `world`]), 'Multiple Arguments')\n      await test(`print({}, 123.456);`, checkOut([`function`, `123.456`]), 'Types')\n\n      /* Commented this out. It works because of this grammar definition:\n       * _Program -> ...\n       *           | ...\n       *           | Command\n       * So a program can be a single command -- that's why this works.\n       */\n      /*\n      try {\n        // WHY IS THIS WORKING!?!?!?!?!?!??\n        test('print(\"hello! this should not work!\")\\n', checkOut`hello! this should not work!`)\n      } catch (err) {\n        console.log('Newline as separator doesn\\'t work, but it hasn\\'t been' +\n                    'implemented yet so that\\'s okay.')\n      }\n      */\n      // Test single quoted string\n      area('Strings')\n      await test(`print('single quoted');`, checkOut`single quoted`, 'Single Quotes')\n      await test(`print(concat(\"foo\", \"bar\"));`, checkOut`foobar`, 'Double Quotes')\n\n      area('String Escapes')\n      await test(`print('single quoted \\\\'escape');`, checkOut`single quoted 'escape`, 'Single Quotes')\n      await test(`print(\"double quoted \\\\\"escape\");`, checkOut`double quoted \"escape`, 'Double Quotes')\n      await test(`print('newline\\\\\\nescape');`, checkOut`newline\\nescape`, 'Newline')\n      await test(`print('escape \\\\\\\\escape');`, checkOut`escape \\\\escape`, 'Backslash')\n      await test(`print('\\\\'single\\\\' and \\\\\"double\\\\\"')`, checkOut`'single' and \"double\"`, 'Single & Double Quotes')\n\n      area('Math')\n      // Test basic math operator functions\n      await test(`print(+(3, 4));`, checkOut`7`, '+ add')\n      await test(`print(-(3, 4));`, checkOut`-1`, '- subtract')\n      await test(`print(*(3, 4));`, checkOut`12`, '* multiply')\n      await test(`print(/(3, 4));`, checkOut`0.75`, '/ divide')\n      // Test decimals\n      await test(`print(+(1.25, 1.755));`, checkOut`3.005`, '  decimals')\n\n      area('Conditionals')\n      // Test basic if\n      await test(`\n      if(true, {\n        print(\"good\");\n      });`, checkOut`good`, 'if')\n      // Test ifel (if condition do this; otherwise do that)\n      await test(`\n      ifel(false, {\n        print(\"bad\");\n      }, {\n        print(\"good\");\n      });`, checkOut`good`, 'ifel')\n      // Test else-code as optional argument to if\n      await test(`\n      if(false, {\n        print(\"bad\");\n      }, {\n        print(\"good\");\n      });`, checkOut`good`, 'else')\n\n      area('Logic & Comparison')\n      // Test logic operator functions\n      await test(`print(and(true, false));`, checkOut`false`, '& and')\n      await test(`print(or(true, false));`, checkOut`true`, '| or')\n      await test(`print(not(true), not(false));`, checkOut([`false`, 'true']), '! not')\n      // Test comparison operator functions\n      await test(`print(eq(10, 20), eq(45, 45));`, checkOut([`false`, `true`]), '= eq')\n      await test(`print(lt(10, 20), lt(70, 30), lt(45, 45));`, checkOut([`true`, `false`, `false`]), '< lt')\n      await test(`print(gt(10, 20), gt(70, 30), gt(45, 45));`, checkOut([`false`, `true`, `false`]), '> gt')\n\n      area('Surround Functions')\n      await test(`print((true and false), (true & true), (99 + 1), (1 - 1), (20 > 1))`, checkOut([\n        `false`,\n        `true`,\n        `100`,\n        `0`,\n        `true`\n      ]), 'basic usage')\n      await test(`print(('this' concat 'is' 'awesome'))`, checkOut`thisisawesome`, 'tertiary argument')\n\n      area('Variables')\n      await test(`foo => 'bar'; print(foo);`, checkOut`bar`, 'assigning & accessing')\n      await test(`foo => 'bar'; foo -> 'baz'; print(foo);`, checkOut`baz`, 'changing')\n\n    } catch (error) {\n      console.log = oldLog\n      console.log('\\x1b[31m[Errored!]\\x1b[0m Error in JS:')\n      console.error(error.stack)\n      process.exit(1)\n    }\n    console.log('\\n');\n    console.timeEnd('Total tests time')\n    console.log(chalk.bold(`${passed}/${tests} tests passed.`))\n\n    if(passed < tests) process.exit(1)\n  }())\n}\n"],"sourceRoot":"/source/"}