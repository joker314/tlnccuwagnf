{"version":3,"sources":["run.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;uEAKO,iBAAmB,IAAnB,EAAyB,GAAzB;AAAA,QACD,MADC,EAED,IAFC,EASC,IATD,EAUC,KAVD,EAYM,CAZN,EAaG,IAbH,EAiBC,EAjBD,EA2BC,OA3BD,EAwCD,MAxCC;;AAAA;AAAA;AAAA;AAAA;AACD,kBADC,GACQ,IAAI,QAAQ,MAAZ,CAAmB,QAAQ,WAA3B,EAAwC,QAAQ,WAAhD,CADR;AAED,gBAFC;AAAA;;AAKH,mBAAO,OAAO,IAAP,CAAY,IAAZ,EAAkB,OAAzB;AALG;AAAA;;AAAA;AAAA;AAAA;;;;AASC,gBATD,GASQ,CATR;AAUC,iBAVD,GAUS,KAAK,KAAL,CAAW,IAAX,CAVT;;AAWH,kBAAM,OAAN,CAAc,EAAd;AACA,iBAAS,CAAT,GAAa,CAAb,EAAgB,IAAI,YAAE,MAAtB,EAA8B,GAA9B,EAAmC;AAC7B,kBAD6B,GACtB,KAAK,CAAL,CADsB;;AAEjC,kBAAI,QAAQ,IAAZ,EAAkB;AACnB;;AAEG,cAjBD,GAiBM,MAAM,IAAN,CAjBN;;;AAmBH,gBAAI,OAAO,CAAP,GAAW,CAAf,EAAkB,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,OAAO,CAAlB,CAAZ,EAAkC,MAAM,OAAO,CAAb,CAAlC;AAClB,gBAAI,IAAJ,EAAU,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,IAAX,CAAZ,EAA8B,MAAM,GAAN,CAAU,EAAV,CAA9B;AACV,gBAAI,OAAO,CAAP,GAAW,MAAM,MAArB,EAA6B,QAAQ,GAAR,CAAY,MAAM,IAAN,CAAW,OAAO,CAAlB,CAAZ,EAAkC,MAAM,OAAO,CAAb,CAAlC;AArB1B,kBAsBG,IAAI,KAAJ,CAAU,MAAM,GAAN,wBAA+B,MAAM,IAAN,WAAmB,IAAnB,CAA/B,OAAV,CAtBH;;AAAA;;AAyBL,gBAAI,KAAK,MAAL,GAAc,CAAlB,EAAqB;AACnB,sBAAQ,IAAR,CAAa,MAAM,GAAN,CAAU,IAAV,CAAe,wBAAf,CAAb;AACI,qBAFe,GAEN,OAAO,YAAP,CAAoB,EAApB,CAFM;;AAGnB,mBAAK,OAAL,CAAa,UAAS,GAAT,EAAc,CAAd,EAAiB;AAC5B,wBAAQ,IAAR,CAAa,yBAAe,GAAf,EAAoB,IAApB,EAA0B,CAA1B,CAAb;AACA,wBAAQ,IAAR,CAAa,kCAAb;AACD,eAHD,IAIA,QAAQ,IAAR,CAAa,MAAM,MAAN,mBACJ,MAAM,IAAN,CAAW,KAAK,MAAhB,CADI,+IAAb,CAJA;AAUD;;AAtCI;AAAA,mBAwCc,OAAO,MAAP,CAAc,KAAK,CAAL,CAAd,EAAuB,GAAvB,CAxCd;;AAAA;AAwCD,kBAxCC;AAAA,6CAyCE,MAzCF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;kBAAe,G;;;;;;;AALtB,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,UAAU,QAAQ,WAAR,CAAhB;AACA,IAAM,SAAS,QAAQ,UAAR,CAAf;AACA,IAAM,QAAQ,QAAQ,OAAR,CAAd","file":"run.js","sourcesContent":["const nearley = require('nearley')\nconst grammar = require('./grammar')\nconst interp = require('./interp')\nconst chalk = require('chalk')\n\nexport async function run(code, dir) {\n  let parser = new nearley.Parser(grammar.ParserRules, grammar.ParserStart)\n  let asts\n\n  try {\n    asts = parser.feed(code).results\n  } catch (e) {\n    // there's been a syntax error :(\n\n    let line = 1\n    let lines = code.split('\\n')\n    lines.unshift('')\n    for (let i = 0; i < e.offset; i++) {\n      let char = code[i]\n      if (char == '\\n') line++\n    }\n\n    let ln = lines[line]\n\n    if (line - 1 > 0) console.log(chalk.bold(line - 1), lines[line - 1])\n    if (line) console.log(chalk.bold(line), chalk.red(ln))\n    if (line + 1 < lines.length) console.log(chalk.bold(line + 1), lines[line + 1])\n    throw new Error(chalk.red(`\\nSyntax Error at ${chalk.cyan(`line ${line}`)}!`))\n  }\n\n  if (asts.length > 1) {\n    console.warn(chalk.red.bold('!! AMBIGUOUS SYNTAX !!'))\n    let escape = String.fromCharCode(27)\n    asts.forEach(function(ast, i) {\n      console.warn(JSON.stringify(ast, null, 0))\n      console.warn('\\n----------------------------\\n')\n    })-\n    console.warn(chalk.yellow(`\nA total of ${chalk.cyan(asts.length)} ASTs were generated.\nPlease report this on the official issue tracker:\nhttps://github.com/liam4/tlnccuwagnf/issues\nUsing first AST.\n`))\n  }\n\n  let result = await interp.interp(asts[0], dir)\n  return result\n}\n"],"sourceRoot":"/source/"}